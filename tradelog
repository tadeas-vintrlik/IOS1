#!/bin/sh
export POSIXLY_CORRECT=1
export LC_ALL=C

usage()
{
echo 'Usage: tradelog [-h|--help] [FILTER] [COMMAND] [LOG [LOG2 [...]]
Stock market log analyzer 

With no FILE, or when FILE is -, read standard input.
Also accepts gzipped files.

COMMAND can be one of:
	list-tick - list of all contained stock symbols - so called tickers
	profit - output profit from closed positions
	pos - output value of all held positions ordered by value ascending
	last-price - output last known price for each ticker
	hist-ord - output histogram of number of transactions per ticker
	graph-pos - output graph of held positions per ticker
FILTER can be a combination of:
	-a DATETIME - after: only dates after DATETIME are included
	DATETIME format is YYYY-MM-DD HH:MM:SS.
	-b DATETIME - before: only values before DATETIME are included
	-t TICKER - only entries with matching ticker are included. 
	Multiple uses of this flag will include union of parameters
	-w WIDTH - Specifies the lenght of the longest line in histograms.
	-h a --help - output this help and exit'
	exit "$1"
}

cmd_amount_err()
{
	echo "Expected one of the commands at most" && usage 1
}

cmd=0 # amount of cmds called (should be 1 at most)
while [ "$#" -gt 0 ]
do
	case "$1" in
	-a)
		shift
		a_filter="$1"
		shift
		;;
	-b)
		shift
		b_filter="$1"
		shift
		;;
	-t)
		shift
		t_filter="$t_filter $1"
		shift
		;;
	-w)
		[ -n "$width" ] && usage 1
		shift
		width="$1"
		shift
		;;
	-h|--help)
		usage 0
		;;
	list-tick)
		list_tick=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	profit)
		profit=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	pos)
		pos=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	last-price)
		last_price=0
		shift
		cmd=$((cmd+1))
		;;
	hist-ord)
		hist_ord=0
		shift
		[ "$cmd" -ge 1 ] && cmd_ammount_err
		cmd=$((cmd+1))
		;;
	graph-pos)
		graph_pos=0
		shift
		[ "$cmd" -ge 1 ] && cmd_ammount_err
		cmd=$((cmd+1))
		;;
	*)
		if [ -z "$files" ]
		then
			files="$1"
		else
			files="$files $1"
		fi
		shift
	esac
done

# Concat all files together
[ -z "$files" ] && text="$(cat -)"
for o in $files
do
	[ ! -f "$o" ] && echo "$o file does not exist!" && exit 1
	if echo "$o" | grep -q ".*.gz"
	then
		text="$text$(gzip -dc "$o")"
	else
		text="$text$(cat "$o")"
	fi
done


apply_t_filter()
{
	for f in $t_filter
	do
		[ -n "$filter_regex" ] && filter_regex="$filter_regex\\|"
		filter_regex="$filter_regex$f;"
	done
	text="$(echo "$text" | grep "$filter_regex")"
}

apply_a_filter()
{
	text="$(echo "$text" | awk -F\; -v time="$a_filter" '{if($1>time){print}}')"
}

apply_b_filter()
{
	text="$(echo "$text" | awk -F\; -v time="$b_filter" '{if($1<time){print}}')"
}

# Apply all the filters
[ -n "$t_filter" ] && apply_t_filter
[ -n "$a_filter" ] && apply_a_filter
[ -n "$b_filter" ] && apply_b_filter

list_tick_f()
{
	echo "$text" | awk -F\; '{print $2}' | sort -u
}

tick_pos_numeric()
{
	echo "$text" | awk -F\; -v t="$1" '{if($2==t){price=$4; if($3=="buy"){sum+=$6}else{sum-=$6}}} END{printf "%.2f\n", sum*price}'
}

abs()
{

	if [ "$(awk -v arg="$1" 'BEGIN{print(arg < 0)}')" -eq 1 ]
	then
		echo "$1" | tr -d -
	else
		echo "$1"
	fi
}

max_pos()
{
	max=0
	for tick in $(list_tick_f)
	do
		new="$(tick_pos_numeric "$tick")"
		[ "$(awk -v new_n="$new" -v new="$(abs "$new")" -v max="$(abs "$max")" 'BEGIN{if(new_n < 0){new+=1}print(new > max)}')" -eq 1 ] && max="$new"
	done
	echo "$max"
}

longest_pos_f()
{
	pos=""
	for tick in $(list_tick_f)
	do
		pos="$pos$(echo "$text" | awk -F\; -v t="$tick" '{if($2==t){price=$4; if($3=="buy"){sum+=$6}else{sum-=$6}}} END{printf "%.2f\\n", sum*price}')"
	done
	pos="$(echo "$pos" | sed 's/-/\\-/g')" # escape all minuses for printf since
	# some versions of echo do not have the -e flag"
	printf "%b" "$pos" | awk -F\; '{if(length > max){max=length}} END{print max}'
}

tick_pos_f()
{
	echo "$text" | awk -F\; -v t="$1" -v l="$2" '{if($2==t){price=$4; if($3=="buy"){sum+=$6}else{sum-=$6}}} END{printf "%-10s:%*.2f\\n", t, l, sum*price}'
}

last_price()
{
	echo "$text" | grep "$1" | tail -n 1 | awk -F\; '{print $4}'
}

pos_f()
{
	length="$(longest_pos_f)"
	for tick in $(list_tick_f)
	do
		all_pos="$all_pos$(tick_pos_f "$tick" "$length")"
	done
	pos="$(echo "$all_pos" | sed 's/-/\\-/g')" # escape all minuses for printf since 
	# some versions of echo do not have the -e flag
	printf "%b" "$all_pos" | sort -t: -rnk2 | awk '$1'
	# Awk just to remove empty line created by sort
}

profit_f()
{
	echo "$text" | awk -F\; '{if($3=="buy"){sum-=$4*$6}else{sum+=$4*$6}} END {printf "%.2f\n", sum}'
}

longest_price_f()
{
	# This bottlenecks the whole programme
	max=0
	for tick in $(list_tick_f)
	do
		new="$(echo "$text" | grep "$tick" | tail -n 1 | awk -F\; '{printf("%.2f\n", $4+1)}' | wc -m)"
		[ "$new" -gt "$max" ] && max="$new"
	done
	echo "$new"
}

last_price_f()
{

	length="$(longest_price_f)"
	for tick in $(list_tick_f)
	do
		echo "$text" | grep "$tick" | tail -n 1 | awk -F\; -v l="$length" '{printf("%-9s : %*.2f\n", $2, l, $4)}'
	done
}

# Return the most transactions on a single tick
max_transactions()
{
	max=0
	for tick in $(list_tick_f)
	do
		amount="$(echo "$text" | grep -c ";$tick;")"
		[ "$amount" -gt "$max" ] && max=$amount
	done
	echo "$max"
}

hist_ord_f()
{
	[ -n "$width" ] && max="$(max_transactions)"
	for tick in $(list_tick_f)
	do
		printf "%-10s: " "$tick"
		tick_transactions="$(echo "$text" | grep -c ";$tick;")"

		# Adjust the width
		[ -n "$width" ] &&
			tick_transactions="$(echo "$tick_transactions * ($width / $max)" |
				bc -l | xargs printf "%d" 2>/dev/null)" 

		# Redirect stderr to /dev/null since printf throws an
		# annoying error message about flooring the number

		# Print a matching number of # in the histogram
		while [  "$tick_transactions" -gt 0 ]
		do
			printf "#"
			tick_transactions=$((tick_transactions-1))
		done
		echo ""
	done
}

graph_pos_f()
{
	[ -n "$width" ] && max="$(abs "$(max_pos)")"
	for tick in $(list_tick_f)
	do
		printf "%-10s:" "$tick"
		tick_pos="$(tick_pos_numeric "$tick")"

		# Adjust the width
		[ -n "$width" ] && tick_pos="$(echo "$tick_pos * $width / $max" |
				bc -l | xargs printf "%d" 2>/dev/null)"

		# Redirect stderr to /dev/null since printf throws an
		# annoying error message about flooring the number

		# Default unit is 1000 if no width specified
		[ -z "$width" ] && tick_pos="$(echo "$tick_pos / 1000" |
				bc -l | xargs printf "%d" 2>/dev/null)"

		char="#"
		[ "$tick_pos" -lt 0 ] && char="!" && tick_pos=$((-tick_pos))
		# Print a matching number of # in the histogram
		[ "$tick_pos" -gt 0 ] && printf " " 
		while [ "$tick_pos" -gt 0 ]
		do
			printf "%c" "$char"
			tick_pos=$((tick_pos-1))
		done
		echo ""
	done
}

[ -n "$list_tick" ] && list_tick_f && exit 0
[ -n "$profit" ] && profit_f && exit 0
[ -n "$pos" ] && pos_f && exit 0
[ -n "$last_price" ] && last_price_f && exit 0
[ -n "$hist_ord" ] && hist_ord_f && exit 0
[ -n "$graph_pos" ] && graph_pos_f && exit 0
echo "$text"
