#!/usr/bin/env dash
POSIXLY_CORRECT=1
LC_ALL=C

# TODO: Make prettier
usage()
{
echo 'JMÉNO
	tradelog - analyzátor logů z obchodování na burze

POUŽITÍ
	tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]

VOLBY

PŘÍKAZ může být jeden z:
	list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”.
	profit – výpis celkového zisku z uzavřených pozic.
	pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.
	last-price – výpis poslední známé ceny pro každý ticker.
	hist-ord – výpis histogramu počtu transakcí dle tickeru.
	graph-pos – výpis grafu hodnot držených pozic dle tickeru.
FILTR může být kombinace následujících:
	-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DAT
	TIME je formátu YYYY-MM-DD HH:MM:SS.
	-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
	-t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více
	výskytech přepínače se bere množina všech uvedených tickerů.
	-w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. 	Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění.
	-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače.'
	exit "$1"
}

cmd_amount_err()
{
	echo "Expected one of the commands at most" && usage 1
}

cmd=0 # amount of cmds called (should be 1 at most)
while [ "$#" -gt 0 ]
do
	case "$1" in
	-a)
		echo "after switch"
		shift
		echo "$1 was the arg"
		shift
		;;
	-b)
		echo "before switch"
		shift
		echo "$1 was the arg"
		shift
		;;
	-t)
		shift
		t_filter="$t_filter $1"
		shift
		;;
	-w)
		echo "width switch"
		shift
		echo "$1 was the arg"
		shift
		;;
	-h|--help)
		usage 0
		;;
	list-tick)
		list_tick=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	profit)
		profit=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	pos)
		pos=0
		shift
		[ "$cmd" -ge 1 ] && cmd_amount_err
		cmd=$((cmd+1))
		;;
	last-price)
		last_price=0
		shift
		cmd=$((cmd+1))
		;;
	hist-ord)
		hist_ord=0
		shift
		[ "$cmd" -ge 1 ] && cmd_ammount_err
		cmd=$((cmd+1))
		;;
	graph-pos)
		graph_pos=0
		shift
		[ "$cmd" -ge 1 ] && cmd_ammount_err
		cmd=$((cmd+1))
		;;
	*)
		if [ -z "$files" ]
		then
			files="$1"
		else
			files="$files $1"
		fi
		shift
	esac
done

# Concat all files together
[ -z "$files" ] && text="$(cat -)"
for o in $files
do
	[ ! -f "$o" ] && echo "$o file does not exist!" && exit 1
	if echo "$o" | grep -q ".*.gz"
	then
		text="$text$(gzip -dck "$o")"
	else
		text="$text$(cat "$o")"
	fi
done


apply_t_filter()
{
	for f in $t_filter
	do
		[ -n "$filter_regex" ] && filter_regex="$filter_regex\|"
		filter_regex="$filter_regex$f;"
	done
	text="$(echo "$text" | grep "$filter_regex")"
}

# Apply all the filters
[ -n "$t_filter" ] && apply_t_filter


list_tick_f()
{
	echo "$text" | awk -F\; '{print $2}' | sort -u
}

tick_pos()
{
	echo "$text" | awk -F\; -v t="$1" '{if($2==t){price=$4; if($3=="buy"){sum-=$6}else{sum+=$6}}} END{printf "%-10s:%12.2f\n", t, -sum*price}'
	# TODO: Change formating?
}

last_price()
{
	echo "$text" | grep "$1" | tail -n 1 | awk -F\; '{print $4}'
}

pos_f()
{
	for tick in $(list_tick_f)
	do
		all_pos="$all_pos\n$(tick_pos "$tick")"
	done
	echo "$all_pos" | sort -t: -rnk2 | awk '$1'
	# Awk just to remove empty line created by sort
}

profit_f()
{
	echo "$text" | awk -F\; '{if($3=="buy"){sum-=$4*$6}else{sum+=$4*$6}} END {printf "%.2f\n", sum}'
}

last_price_f()
{
	for tick in $(list_tick_f)
	do
		echo "$text" | grep "$tick" | tail -n 1 | awk -F\; '{printf("%-9s : %7.2f\n", $2, $4)}'
		# TODO: Change formating?
	done
}

[ -n "$list_tick" ] && list_tick_f && exit 0
[ -n "$profit" ] && profit_f && exit 0
[ -n "$pos" ] && pos_f && exit 0
[ -n "$last_price" ] && last_price_f && exit 0
echo "$text"

